import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter1/Apiintegration/userdetails.dart';
import 'package:http/http.dart';

class Http3 extends StatefulWidget {
  const Http3({super.key});

  @override
  State<Http3> createState() => _Http3State();
}

class _Http3State extends State<Http3> {
  Future<Autogenerated> Showdata() async {
    var det = await get(Uri.parse("https://dummyjson.com/users"));

    if (det.statusCode == 200) {
      var data = Autogenerated.fromJson(jsonDecode(det.body));
      print(det.body);
      return data;
    } else {
      throw Exception("error");
    }
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    Showdata();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: FutureBuilder(
            future: Showdata(),
            builder:
                (BuildContext context, AsyncSnapshot<Autogenerated> snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Center(
                  child: Text("errorr"),
                );
              } else if (!snapshot.hasData) {
                return Center(
                  child: Text("has no data"),
                );
              } else if (snapshot.hasData) {
                List<Users>? Exa = snapshot.data?.users;
                return ListView.builder(
                    itemBuilder: (_, int index) {
                      return Card(
                        child: Row(
                          children: [
                            Container(
                                width: 50,
                                height: 200,
                                child: Image(
                                    height: 200,
                                    image:
                                        NetworkImage("${Exa?[index].image}"))),
                            Padding(
                              padding: const EdgeInsets.only(left: 40),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.start,
                                children: [
                                  Row(
                                    children: [
                                      Text(
                                        "${Exa?[index].firstName}",
                                        style: TextStyle(
                                            fontFamily: "font1", fontSize: 20),
                                      ),
                                      SizedBox(
                                        width: 20,
                                      ),
                                      Text("${Exa?[index].lastName}",
                                          style: TextStyle(
                                              fontFamily: "font1",
                                              fontSize: 20)),
                                    ],
                                  ),
                                  Text("${Exa?[index].address?.address}",
                                      style: TextStyle(
                                          fontSize: 20, fontFamily: "font2")),
                                  Text("${Exa?[index].address?.city}",
                                      style: TextStyle(
                                          fontSize: 20, fontFamily: "font2")),
                                  Text("${Exa?[index].address?.state}",
                                      style: TextStyle(
                                          fontSize: 20, fontFamily: "font2")),
                                  Row(
                                    children: [
                                      Text("${Exa?[index].birthDate}",
                                          style:
                                              TextStyle(fontFamily: "font2")),
                                      SizedBox(
                                        width: 100,
                                      ),
                                      Text("${Exa?[index].age}",
                                          style:
                                              TextStyle(fontFamily: "font2")),
                                    ],
                                  )
                                ],
                              ),
                            )
                          ],
                        ),
                      );
                    },
                    itemCount: Exa?.length);
              } else {
                return Text("ERROR");
              }
            }));
  }
}
